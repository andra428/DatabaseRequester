# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import users_pb2
import users_pb2 as users__pb2
from datetime import datetime, timedelta
import jwt
import uuid
from base import Session
from tabel import User
from ops import readList, checkToken, checkDate, writeList


class AuthServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AuthenticateUser = channel.unary_unary(
                '/AuthService/AuthenticateUser',
                request_serializer=users__pb2.UserCredentials.SerializeToString,
                response_deserializer=users__pb2.AuthToken.FromString,
                )
        self.ValidateToken = channel.unary_unary(
                '/AuthService/ValidateToken',
                request_serializer=users__pb2.Token.SerializeToString,
                response_deserializer=users__pb2.TokenInfo.FromString,
                )
        self.InvalidateToken = channel.unary_unary(
                '/AuthService/InvalidateToken',
                request_serializer=users__pb2.Token.SerializeToString,
                response_deserializer=users__pb2.SuccessResponse.FromString,
                )


class AuthServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AuthenticateUser(self, request, context):
        username = request.username
        password = request.password

        session = Session()
        user = session.query(User).filter(User.username == username).first()
        if user:
            if user.password == password:
                t = datetime.now()
                t = t + timedelta(hours=2)
                exp = t

                p = {
                    "iss": "http://127.0.0.1:50051",
                    "sub": user.uid,
                    "exp": exp,
                    "jti": str(uuid.uuid4()),
                    "role": user.role
                }

                e = jwt.encode(p, "secret", algorithm="HS256")

                return users_pb2.AuthToken(token_value=e)

        return users_pb2.SuccesResponse(message="Error: Username or password incorrect")

    def ValidateToken(self, request, context):
        session = Session()
        list = readList()

        if request.token_value not in list.values():
            p = checkToken(request.token_value)

            if p:
                check_exp = checkDate(request.token_value, p)
                if check_exp == False:
                    return  users_pb2.SuccesResponse(message="Error: Token expired")

                user = session.query(User).filter(User.uid == p['sub']).first()
                if user:
                    p2 = {
                        "sub": user.uid,
                        "role": user.role
                    }
                    e = jwt.encode(p2, "secret", algorithm="HS256")
                    return users_pb2.TokenInfo(sub=e,role=user.role)
            else:
                return users_pb2.SuucesResponse(message="Error: Token invalid")

        return users_pb2.SuccesResponse(message="Token blacklist")

    def InvalidateToken(self, request, context):
        list = readList()
        if request.token_value not in list.values():
            p = checkToken(request.token_value)

            if p:
                check_exp = checkDate(request.token_value, p)
                if check_exp == False:
                    return users_pb2.ErrorResponse(error_message="Expired token")

            p2 = jwt.decode(request.token_value, "secret", "HS256")
            uuid = p2['jti']
            list[uuid] = request.token_value
            writeList(list)

        return users_pb2.SuccessResponse(message="Succes")

def add_AuthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AuthenticateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthenticateUser,
                    request_deserializer=users__pb2.UserCredentials.FromString,
                    response_serializer=users__pb2.AuthToken.SerializeToString,
            ),
            'ValidateToken': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateToken,
                    request_deserializer=users__pb2.Token.FromString,
                    response_serializer=users__pb2.TokenInfo.SerializeToString,
            ),
            'InvalidateToken': grpc.unary_unary_rpc_method_handler(
                    servicer.InvalidateToken,
                    request_deserializer=users__pb2.Token.FromString,
                    response_serializer=users__pb2.SuccessResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AuthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AuthService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AuthenticateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AuthService/AuthenticateUser',
            users__pb2.UserCredentials.SerializeToString,
            users__pb2.AuthToken.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValidateToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AuthService/ValidateToken',
            users__pb2.Token.SerializeToString,
            users__pb2.TokenInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InvalidateToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AuthService/InvalidateToken',
            users__pb2.Token.SerializeToString,
            users__pb2.SuccessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
